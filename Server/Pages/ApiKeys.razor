@page "/api-keys"
@attribute [Authorize]
@inherits AuthComponentBase

@inject IDataService DataService
@inject AuthenticationStateProvider AuthProvider
@inject IJsInterop JsInterop
@inject IModalService ModalService


<h3>Klucze API</h3>

@if (!string.IsNullOrWhiteSpace(_alertMessage))
{
    <AlertBanner Message="@_alertMessage" />
}

@if (User?.IsAdministrator == true)
{
    if (!string.IsNullOrWhiteSpace(_newKeySecret))
    {
        <h5 class="text-warning font-weight-bold mb-2 mt-4">Uwaga: Klucz zostanie pokazany tylko raz.  Proszę go zapisać.</h5>
        <h5 class="mb-4">
            <label class="mr-1">Klucz:</label>
            <input class="form-control custom-control-inline" readonly value="@_newKeySecret" style="width:400px" />
        </h5>
    }


    <div class="mb-2 mt-4">
        <label class="mr-1">Nazwa Tokenu:</label>
        <input @bind="_createKeyName" @bind:event="oninput"
               class="form-control form-control-sm custom-control-inline mr-1"
               style="width:200px" />

        <button class="btn btn-primary" type="button" @onclick="CreateNewKey">Stwórz</button>

        <button class="btn btn-sm btn-secondary ml-2" @onclick="ShowApiKeyHelp">
            <span class="oi oi-question-mark"></span>
        </button>
    </div>

    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>ID</th>
                <th>Ostatnio użyty</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var apiToken in _apiTokens)
            {
                <tr @key="apiToken.ID">
                    <td>@apiToken.Name</td>
                    <td>@apiToken.ID</td>
                    <td>@apiToken.LastUsed</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => RenameKey(apiToken.ID)">Zmień nazwę</button>
                    </td>
                    <td>
                        <button type="submit" class="btn btn-danger" @onclick="() => DeleteKey(apiToken.ID)">Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h5 class="text-muted">Tylko administratorzy organizacja mogą zobaczyć tę stronę.</h5>
}


@code {
    private readonly List<ApiToken> _apiTokens = new();
    private string _alertMessage;
    private string _createKeyName;
    private string _newKeySecret;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RefreshData();
    }

    private async Task CreateNewKey()
    {
        var secret = PasswordGenerator.GeneratePassword(36);
        var secretHash = new PasswordHasher<nexRemoteFreeUser>().HashPassword(null, secret);

        await DataService.CreateApiToken(Username, _createKeyName, secretHash);
        RefreshData();
        _alertMessage = "Klucz utworzony.";
        _newKeySecret = secret;
    }

    private async Task DeleteKey(string keyId)
    {
        var result = await JsInterop.Confirm("Jesteś pewien, że chcesz usunąć klucz?");
        if (result)
        {
            await DataService.DeleteApiToken(Username, keyId);
            RefreshData();
            _alertMessage = "Klucz usunięty.";
        }
    }

    private void RefreshData()
    {
        _apiTokens.Clear();
        _apiTokens.AddRange(DataService.GetAllApiTokens(User.Id));
        _createKeyName = null;
        _alertMessage = null;
        _newKeySecret = null;
    }


    private async Task RenameKey(string keyId)
    {
        var newName = await JsInterop.Prompt("Nowa nazwa klucza");
        if (!string.IsNullOrWhiteSpace(newName))
        {
            await DataService.RenameApiToken(Username, keyId, newName);
            RefreshData();
            _alertMessage = "Nazwa klucza zmieniona.";
        }
    }

    private void ShowApiKeyHelp()
    {
        ModalService.ShowModal("Wykorzystanie kluczy API", new[]
        {
            "Klucze API należy dodać do nagłówka żądania podczas wykonywania wywołań API. Klucz powinien mieć postać \"Autoryzacja\", a wartość powinna mieć postać \"{key-id}:{key-secret}\". Zwróć uwagę na dwukropek pomiędzy.",
            "Przykład: Autoryzacja=e5da1c09-e851-4bd4-a8c1-532144b3f894:7uY6h5zBYm4+90pZVek4lD6ewbQ83nKcDpghBfG00hhZu6Ew"
        });
    }
}
